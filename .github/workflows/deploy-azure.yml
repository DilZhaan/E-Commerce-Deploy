name: Deploy to Azure VM

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      backend_tag:
        description: 'Backend Docker image tag'
        required: false
        default: 'latest'
      frontend_tag:
        description: 'Frontend Docker image tag'
        required: false
        default: 'latest'

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.AZURE_VM_SSH_KEY }}

      - name: Add Azure VM to known hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.AZURE_VM_IP }} >> ~/.ssh/known_hosts

      - name: Create .env file
        run: |
          cat << EOF > .env
          BACKEND_IMAGE=dilzhan/ecommerce-backend:${{ github.event.inputs.backend_tag || 'latest' }}
          FRONTEND_IMAGE=dilzhan/ecommerce-frontend:${{ github.event.inputs.frontend_tag || 'latest' }}
          MONGODB_URI=${{ secrets.MONGODB_URI }}
          TOKEN_SECRET_KEY=${{ secrets.TOKEN_SECRET_KEY }}
          TOKEN_EXPIRY=${{ secrets.TOKEN_EXPIRY }}
          SMS_CONTACT_LIST_ID=${{ secrets.SMS_CONTACT_LIST_ID }}
          SMS_API_TOKEN=${{ secrets.SMS_API_TOKEN }}
          SMS_API_URL=${{ secrets.SMS_API_URL }}
          ALLOWED_ORIGINS=${{ secrets.ALLOWED_ORIGINS }}
          FRONTEND_URL=${{ secrets.FRONTEND_URL }}
          BACKEND_URL=${{ secrets.BACKEND_URL }}
          EOF

      - name: Copy files to Azure VM
        run: |
          ssh ${{ secrets.AZURE_VM_USERNAME }}@${{ secrets.AZURE_VM_IP }} 'mkdir -p ~/ecommerce-deploy'
          scp docker-compose.yml .env ${{ secrets.AZURE_VM_USERNAME }}@${{ secrets.AZURE_VM_IP }}:~/ecommerce-deploy/

      - name: Deploy on Azure VM
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.AZURE_VM_IP }}
          username: ${{ secrets.AZURE_VM_USERNAME }}
          key: ${{ secrets.AZURE_VM_SSH_KEY }}
          script: |
            cd ~/ecommerce-deploy
            docker-compose pull
            docker-compose down --remove-orphans
            docker system prune -af
            docker-compose up -d 
