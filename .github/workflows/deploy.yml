name: Deploy to Azure VM

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      backend_tag:
        description: 'Backend Docker image tag'
        required: false
        default: 'latest'
      frontend_tag:
        description: 'Frontend Docker image tag'
        required: false
        default: 'latest'

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.AZURE_VM_SSH_KEY }}

      - name: Add Azure VM to known hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.AZURE_VM_IP }} >> ~/.ssh/known_hosts

      - name: Create .env file
        run: |
          {
            echo "BACKEND_IMAGE=dilzhan/ecommerce-backend:${BACKEND_TAG}"
            echo "FRONTEND_IMAGE=dilzhan/ecommerce-frontend:${FRONTEND_TAG}"
            echo "MONGODB_URI=${MONGODB_URI}"
            echo "TOKEN_SECRET_KEY=${TOKEN_SECRET_KEY}"
            echo "TOKEN_EXPIRY=${TOKEN_EXPIRY}"
            echo "SMS_CONTACT_LIST_ID=${SMS_CONTACT_LIST_ID}"
            echo "SMS_API_TOKEN=${SMS_API_TOKEN}"
            echo "SMS_API_URL=${SMS_API_URL}"
            echo "ALLOWED_ORIGINS=${ALLOWED_ORIGINS}"
            echo "FRONTEND_URL=${FRONTEND_URL}"
            echo "BACKEND_URL=${BACKEND_URL}"
          } > .env
          
          echo "Generated .env file structure:"
          cat .env | sed 's/=.*/=****/'
        env:
          BACKEND_TAG: ${{ github.event.inputs.backend_tag || 'latest' }}
          FRONTEND_TAG: ${{ github.event.inputs.frontend_tag || 'latest' }}
          MONGODB_URI: ${{ secrets.MONGODB_URI }}
          TOKEN_SECRET_KEY: ${{ secrets.TOKEN_SECRET_KEY }}
          TOKEN_EXPIRY: ${{ secrets.TOKEN_EXPIRY }}
          SMS_CONTACT_LIST_ID: ${{ secrets.SMS_CONTACT_LIST_ID }}
          SMS_API_TOKEN: ${{ secrets.SMS_API_TOKEN }}
          SMS_API_URL: ${{ secrets.SMS_API_URL }}
          ALLOWED_ORIGINS: ${{ secrets.ALLOWED_ORIGINS }}
          FRONTEND_URL: ${{ secrets.FRONTEND_URL }}
          BACKEND_URL: ${{ secrets.BACKEND_URL }}

      - name: Fix Docker permissions on VM
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.AZURE_VM_IP }}
          username: ${{ secrets.AZURE_VM_USERNAME }}
          key: ${{ secrets.AZURE_VM_SSH_KEY }}
          script: |
            # Stop Docker
            sudo systemctl stop docker
            
            # Remove existing Docker group and recreate it
            sudo groupdel docker || true
            sudo groupadd docker
            
            # Add current user to Docker group
            sudo usermod -aG docker $USER
            
            # Reset Docker socket permissions
            sudo rm -rf /var/run/docker.sock
            sudo systemctl start docker
            sudo chmod 666 /var/run/docker.sock
            
            # Verify permissions
            ls -l /var/run/docker.sock
            groups $USER
            
            # Create deployment directory
            mkdir -p ~/ecommerce-deploy
            sudo chown -R $USER:$USER ~/ecommerce-deploy

      - name: Copy deployment files
        run: |
          scp -o StrictHostKeyChecking=no docker-compose.yml .env ${{ secrets.AZURE_VM_USERNAME }}@${{ secrets.AZURE_VM_IP }}:~/ecommerce-deploy/

      - name: Deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.AZURE_VM_IP }}
          username: ${{ secrets.AZURE_VM_USERNAME }}
          key: ${{ secrets.AZURE_VM_SSH_KEY }}
          script: |
            # Reconnect to get new group membership
            newgrp docker << 'EONG'
            
            cd ~/ecommerce-deploy
            
            # Login to Docker Hub
            echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u dilzhan --password-stdin
            
            # Pull images first
            docker-compose pull
            
            # Stop and remove existing containers
            docker-compose down --remove-orphans || true
            
            # Clean up unused resources
            docker system prune -af --volumes --force || true
            
            # Start services
            docker-compose up -d
            
            # Show status
            docker-compose ps
            docker-compose logs --tail=20
            EONG 