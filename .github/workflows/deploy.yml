name: Deploy to Azure VM

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      backend_tag:
        description: 'Backend Docker image tag'
        required: false
        default: 'latest'
      frontend_tag:
        description: 'Frontend Docker image tag'
        required: false
        default: 'latest'

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.AZURE_VM_SSH_KEY }}

      - name: Add Azure VM to known hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.AZURE_VM_IP }} >> ~/.ssh/known_hosts

      - name: Create deployment directory
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.AZURE_VM_IP }}
          username: ${{ secrets.AZURE_VM_USERNAME }}
          key: ${{ secrets.AZURE_VM_SSH_KEY }}
          script: |
            mkdir -p ~/ecommerce-deploy
            sudo chown -R $USER:$USER ~/ecommerce-deploy

      - name: Debug - Print Secrets Format
        run: |
          echo "Checking MONGODB_URI format (first 10 chars): ${MONGODB_URI:0:10}..."
          echo "Checking ALLOWED_ORIGINS format: $ALLOWED_ORIGINS"
        env:
          MONGODB_URI: ${{ secrets.MONGODB_URI }}
          ALLOWED_ORIGINS: ${{ secrets.ALLOWED_ORIGINS }}

      - name: Create .env file
        run: |
          # Create each line separately to better handle special characters
          echo "BACKEND_IMAGE=dilzhan/ecommerce-backend:${BACKEND_TAG}" > .env
          echo "FRONTEND_IMAGE=dilzhan/ecommerce-frontend:${FRONTEND_TAG}" >> .env
          echo "MONGODB_URI='${MONGODB_URI}'" >> .env
          echo "TOKEN_SECRET_KEY='${TOKEN_SECRET_KEY}'" >> .env
          echo "TOKEN_EXPIRY='${TOKEN_EXPIRY}'" >> .env
          echo "SMS_CONTACT_LIST_ID='${SMS_CONTACT_LIST_ID}'" >> .env
          echo "SMS_API_TOKEN='${SMS_API_TOKEN}'" >> .env
          echo "SMS_API_URL='${SMS_API_URL}'" >> .env
          echo "ALLOWED_ORIGINS='${ALLOWED_ORIGINS}'" >> .env
          echo "FRONTEND_URL='${FRONTEND_URL}'" >> .env
          echo "BACKEND_URL='${BACKEND_URL}'" >> .env
          
          # Debug - Print the .env file content (excluding sensitive values)
          echo "Generated .env file structure:"
          cat .env | sed 's/=.*/=****/'
        env:
          BACKEND_TAG: ${{ github.event.inputs.backend_tag || 'latest' }}
          FRONTEND_TAG: ${{ github.event.inputs.frontend_tag || 'latest' }}
          MONGODB_URI: ${{ secrets.MONGODB_URI }}
          TOKEN_SECRET_KEY: ${{ secrets.TOKEN_SECRET_KEY }}
          TOKEN_EXPIRY: ${{ secrets.TOKEN_EXPIRY }}
          SMS_CONTACT_LIST_ID: ${{ secrets.SMS_CONTACT_LIST_ID }}
          SMS_API_TOKEN: ${{ secrets.SMS_API_TOKEN }}
          SMS_API_URL: ${{ secrets.SMS_API_URL }}
          ALLOWED_ORIGINS: ${{ secrets.ALLOWED_ORIGINS }}
          FRONTEND_URL: ${{ secrets.FRONTEND_URL }}
          BACKEND_URL: ${{ secrets.BACKEND_URL }}

      - name: Copy files and set permissions
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.AZURE_VM_IP }}
          username: ${{ secrets.AZURE_VM_USERNAME }}
          key: ${{ secrets.AZURE_VM_SSH_KEY }}
          script: |
            # Ensure docker group exists and add user to it
            sudo groupadd -f docker
            sudo usermod -aG docker $USER
            # Set proper permissions
            sudo chown -R $USER:$USER ~/ecommerce-deploy
            sudo chmod 600 ~/ecommerce-deploy/.env

      - name: Copy deployment files
        run: |
          scp -o StrictHostKeyChecking=no docker-compose.yml .env ${{ secrets.AZURE_VM_USERNAME }}@${{ secrets.AZURE_VM_IP }}:~/ecommerce-deploy/

      - name: Deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.AZURE_VM_IP }}
          username: ${{ secrets.AZURE_VM_USERNAME }}
          key: ${{ secrets.AZURE_VM_SSH_KEY }}
          script: |
            cd ~/ecommerce-deploy
            # Ensure proper permissions
            sudo chmod 600 .env
            # Restart docker to ensure group changes take effect
            sudo systemctl restart docker
            # Wait for Docker to be ready
            sleep 5
            # Deploy
            sudo docker-compose pull
            sudo docker-compose down --remove-orphans
            sudo docker system prune -af --force
            sudo docker-compose up -d
            # Show deployment status
            sudo docker-compose ps
            sudo docker-compose logs --tail=20 